To create a vector of bits in C++, you can use the `std::vector<bool>` container provided by the C++ Standard Library. Here's an example of how you can create and manipulate a vector of bits:

```cpp
#include <iostream>
#include <vector>

int main() {
    std::vector<bool> bitVector;

    // Set some bits
    bitVector.push_back(true);
    bitVector.push_back(false);
    bitVector.push_back(true);

    // Access and modify bits
    bitVector[1] = true;
    bitVector[2] = false;

    // Print the bits
    for (bool bit : bitVector) {
        std::cout << bit;
    }
    std::cout << std::endl;

    return 0;
}
```

In this example, we create a `std::vector<bool>` called `bitVector`. We can then use the `push_back()` function to add bits to the vector. We can also access and modify individual bits using the indexing operator `[]`. Finally, we can iterate over the vector to print the bits.

Note that `std::vector<bool>` is a specialized implementation that stores each bit as a separate boolean value, which can be more memory-efficient than using a regular `std::vector<char>` or `std::vector<int>`. However, it also has some limitations, such as not supporting direct access to individual bits using the `[]` operator.
