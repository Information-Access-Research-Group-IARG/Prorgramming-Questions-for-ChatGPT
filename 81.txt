Recursion is a programming concept where a function calls itself to solve a problem by breaking it down into smaller, simpler instances of the same problem. It involves solving a problem by solving smaller instances of the same problem until a base case is reached.

Let's use the Fibonacci sequence as an example. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones. The sequence starts with 0 and 1.

To calculate the nth Fibonacci number using recursion, we can define a function that calls itself to calculate the two preceding Fibonacci numbers and then adds them together.

Here's an example of a recursive function to calculate the nth Fibonacci number in Python:

```python
def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)
```

In this function, we have a base case where if n is less than or equal to 1, we return n itself. This is because the first two Fibonacci numbers are 0 and 1.

If n is greater than 1, we recursively call the `fibonacci` function with `n-1` and `n-2` as arguments. This means that to calculate the nth Fibonacci number, we need to calculate the (n-1)th and (n-2)th Fibonacci numbers.

The recursion continues until the base case is reached, and then the function starts returning the Fibonacci numbers back up the call stack until the final result is obtained.

For example, if we call `fibonacci(5)`, the function will make the following recursive calls:

```
fibonacci(5) -> fibonacci(4) + fibonacci(3)
fibonacci(4) -> fibonacci(3) + fibonacci(2)
fibonacci(3) -> fibonacci(2) + fibonacci(1)
fibonacci(2) -> fibonacci(1) + fibonacci(0)
```

Eventually, the base cases `fibonacci(1)` and `fibonacci(0)` will be reached, and the recursion will start unwinding:

```
fibonacci(2) -> 1 + 0 = 1
fibonacci(3) -> 1 + 1 = 2
fibonacci(4) -> 2 + 1 = 3
fibonacci(5) -> 3 + 2 = 5
```

So, `fibonacci(5)` returns 5, which is the 5th Fibonacci number.

Recursion can be a powerful technique, but it should be used with caution as it can lead to performance issues if not implemented properly.
